generator client {
  provider= "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id                   Int             @id @default(autoincrement())
  firstName            String
  lastName             String
  email                String          @unique
  password             String
  registrationDate     DateTime        @default(now())
  dateOfBirth          DateTime?
  receiveNotifications Boolean         @default(false)
  preferredCity        String?
  preferredCounty      String?
  profilePhoto         String?
  surveyResponse       Json?
  streak               Int             @default(0)
  journalEntries       Journal[]
  appointments         Appointment[]
  DoctorUsers          DoctorUser[]
  Medicine             Medicine[]
  MoodEntry            MoodEntry[]
}

model Doctor {
  id                         Int           @id @default(autoincrement())
  firstName                  String
  lastName                   String
  gender                     String
  yearsOfExperience          Int
  specialization             String
  practicingCity             String
  contactInfo                String
  polyclinic                 String
  subscriptionTier           Int           @default(0)
  doctorType                 DoctorType
  isAvailableForAppointments Boolean       @default(true)
  availableTimes             Json?
  doctorSurvey               Json?
  appointments               Appointment[]
  DoctorUser                 DoctorUser[]
  Medicine                   Medicine[]
}

model Appointment {
  id        Int               @id @default(autoincrement())
  user      User              @relation(fields: [userId], references: [id])
  userId    Int
  doctor    Doctor            @relation(fields: [doctorId], references: [id])
  doctorId  Int
  startTime DateTime
  endTime   DateTime
  status    AppointmentStatus @default(PENDING)
  price     Float?
}

model FactorCategory {
  id                 Int                 @id @default(autoincrement())
  name               String              @unique
  InfluencingFactors InfluencingFactor[]
}

model InfluencingFactor {
  id         Int            @id @default(autoincrement())
  name       String         @unique
  createdAt  DateTime       @default(now())
  category   FactorCategory @relation(fields: [categoryId], references: [id])
  categoryId Int
  Journal    Journal?       @relation(fields: [journalId], references: [id])
  journalId  Int?
}

model Journal {
  id                 Int                 @id @default(autoincrement())
  user               User                @relation(fields: [userId], references: [id])
  userId             Int
  entryDate          DateTime            @default(now())
  entryText          String?
  MoodEntry          MoodEntry?
  influencingFactors InfluencingFactor[]
}

model Mood {
  id          Int         @id @default(autoincrement())
  emoji       String
  message     String
  MoodEntries MoodEntry[]
}

model MoodEntry {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  journal   Journal  @relation(fields: [journalId], references: [id])
  journalId Int      @unique
  userId    Int
  mood      Mood     @relation(fields: [moodId], references: [id])
  moodId    Int
  createdAt DateTime @default(now())
}

model BreathingExercise {
  id                  Int     @id @default(autoincrement())
  exerciseName        String
  exerciseDescription String?
  exercisePhoto       String?
}

model DoctorUser {
  id                     Int                  @id @default(autoincrement())
  doctor                 Doctor               @relation(fields: [doctorId], references: [id])
  doctorId               Int
  user                   User                 @relation(fields: [userId], references: [id])
  userId                 Int
  isDoctorApprovedByUser DoctorApprovalStatus
  journalAccess          Boolean              @default(false)
}

model Medicine {
  id                 Int     @id @default(autoincrement())
  name               String
  description        String?
  quantity           String
  prescribedByDoctor Doctor  @relation(fields: [doctorId], references: [id])
  doctorId           Int
  usedBy             User    @relation(fields: [userId], references: [id])
  userId             Int
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}

enum DoctorApprovalStatus {
  PENDING
  INTHERAPY
  DECLINED
}

enum DoctorType {
  PSYCHOLOGIST
  PSYCHIATRIST
}
